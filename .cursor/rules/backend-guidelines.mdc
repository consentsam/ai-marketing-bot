---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# Backend Rules for YieldFi AI Agent

> **Summary**  
> - Purpose: Define server/API conventions & best practices for `app.py` & `src/`.  
> - Rationale: Maintain consistent error handling, logging, config usage.  
> - Usage: For all backend dev tasks & code reviews.  
> - TODOs: Add DB migration/caching guidelines if a dedicated DB is used.

---

## 1. File & Folder Organization
- Group code by domain under `src/` (e.g., `src/ai`, `src/knowledge`).  
- Keep `app.py` or the main entry point minimal—focus on orchestrating calls, not business logic.  
- Use snake_case for filenames (`response_generator.py`).  
- Keep dedicated modules for `handlers` (if relevant), `services` (business logic), `models`, `utils`.

---

## 2. Error Handling & Logging
- Use structured logging (Python’s `logging`, possibly JSON logs if integrating with observability tools).  
- Log exceptions with stack traces (`logger.exception()`).  
- Implement custom exception classes for known error conditions (like `APIError`).  
- Return user-friendly error messages or fallback suggestions from user-facing functions.  
- Avoid exposing sensitive stack traces externally.

---

## 3. Request/Response Schema & Validation (If Building an API)
- Use Pydantic/Marshmallow for request/response models if you have a web API.  
- Validate inputs at the boundary.  
- Standardize error responses, e.g.:
  ```json
  {"error": {"code": "FETCH_FAILED", "message": "Could not retrieve tweet data."}}


⸻

4. Configuration & Secrets Management
	•	Load config from .env or environment via python-dotenv and src/config/settings.py.
	•	No secrets in source control (use .env.example).
	•	(Optional) Follow 12-factor principle: no config in code, only in env or config files.

⸻

5. Testing: Unit & Integration
	•	Use pytest for unit tests on core logic, mocking external dependencies.
	•	For integration tests, mock only the final external calls.
	•	Use fixtures to manage sample data (Tweet, Account) and setup/teardown logic.

⸻

6. Backend Debugging Approach
	1.	Analyze the problem, referencing logs & error messages.
	2.	Hypothesize causes; plan solutions.
	3.	Implement the best approach.
	4.	Test & Verify with relevant scripts or commands.
	5.	Iterate if issues remain.
	6.	Escalate with a clear summary if stuck after multiple attempts.
