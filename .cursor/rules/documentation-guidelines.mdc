---
description: 
globs: 
alwaysApply: true
---

# Documentation & Structure Guidelines for YieldFi AI Agent Project

> **Summary**  
> - Purpose: Standardize project docs (README, code comments).  
> - Rationale: Maintain clarity and navigability.  
> - Usage: For `README.md`, docstrings, changes logs.  
> - TODOs: Possibly automate a changelog from commits.

---

## 1. README Layout & Content
- **Project Description**: Summarize the AI Agent’s purpose.  
- **Setup Instructions**: Steps for installing requirements, setting up `.env`.  
- **Usage Guide**: How to run (`streamlit run app.py`), input data, interpret output.  
- **Configuration**: Key environment variables, `config.yaml` details.  
- **Project Structure**: Summaries of `src/ai`, `src/knowledge`, etc.  
- **Changelog**: Keep a section for major changes with dates.

---

## 2. Code-Level Documentation (Docstrings & Comments)
- Use docstrings in Python following **reST** (reStructuredText) style (e.g., Sphinx-compatible).  
- Docstrings for all public classes & functions.  
- Inline comments only for complex or non-obvious logic.

---

## 3. Change-Log & Versioning Format (in README.md)
- Use date-based or semantic version headings.  
- Summarize features & fixes under each version/date.  
- Example:
  ```markdown
  ## Changelog

  ### v0.2.0 (2025-05-10)
  - Added KOL account type interactions
  - Improved tone adaptation

  ### v0.1.0 (2025-05-06)
  - Initial release


⸻

4. Conversation-Log Structure
	•	If logging interactions, record timestamps (UTC), input context, generated prompt, AI response, any errors.

⸻

5. Linking Conventions (within Docs)
	•	Use relative paths (./docs/deployment.md), or reference with backticks for code names.
	•	For cross-file references, consistent style with [Link Text](relative/path.md).
