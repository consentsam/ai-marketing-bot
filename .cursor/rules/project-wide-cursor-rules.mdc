---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# Project-Wide Cursor Rules for LLM-Driven-Marketing-Assistant

**Preamble (Formerly “0. Session Initialization”):**  
At the start of every new conversation, the user provides an initial context prompt, specifying your role as an AI/Web3 software developer for the YieldFi AI Agent, referencing key documents (Implementation Plan, Roadmap, docs, etc.), and referencing these rules. You must follow that context to focus on the **Current Step** in the Implementation Plan, and any tasks or user instructions given. Acknowledge the context and proceed accordingly, prioritizing the user’s specified step and tasks.

---
## 1. Adhere Strictly to the Implementation Plan
- **Master Document**: `data/docs/YieldFi-Ai-Agent-Implementation.md` is your single source of truth for tasks & ordering.
- **Step-by-Step Execution**: Only work on the step the user designates. Don’t skip or combine steps.
- **Contextual Awareness**: Always reference the step you’re on. Check any “Step Dependencies” are done.
- **User Instructions Fulfillment**: If the step’s user instructions require external input, request it from the user and wait for it if needed.

---
## 2. Understand Before Acting
- **Summaries**: Read top-of-file summaries or front matter in relevant source files. Summaries should clarify purpose, usage, needed TODOs.
- **File Changelog**: When modifying a file, prepend an entry to a `# Changelog:` block with date/time, step reference, and brief description.
- **Plan Details**: Verify the step tasks, files to be updated, user instructions, then proceed.

---
## 3. Comprehensive Action and Response within a Single Step
1. **Think & Strategize**: State which step you’re doing, outline your approach, mention edge cases.
2. **Identify Changes**: List files to modify or create.
3. **Implement**: Make code changes in small, reviewable increments. 
   - **Incremental Commits**: If changes are large, break them into multiple commits so the user can review them progressively.
4. **Self-Test & Iterate**:
   - **Predict** the outcome of a test or command.
   - **Execute** it.
   - **Compare** results with expectation.
   - **Iterate** if there’s a discrepancy.
5. **Propose Final**: Show final code, how you tested it, and how the user can verify. 
6. **Await User Approval**: If not approved, revise as per feedback.
7. **Document Step Completion**: Mark step done in the Implementation Plan. Update logs or README if needed.

---
## 4. Document Step Completion in `data/docs/YieldFi-Ai-Agent-Implementation.md`
- After approval, mark the step’s checkbox (`[ ]` → `[x]`).
- Add a “**Step Completion Summary (YYYY-MM-DD HH:MM)**” block showing modified files and a summary of changes.

---
## 5. Follow Clean Code & Documentation Guidelines
- Use meaningful names, prefer constants over magic strings.
- Keep functions single-responsibility.
- Add docstrings or summary blocks in each new or significantly modified file.
- See `documentation-guidelines.mdc` for details.

---
## 6. Versioning and Overall Change Logging
- Optionally link commit hashes or PRs if using Git. 
- Keep minimal, well-labeled commits so the user can track changes.

---
## 7. Minimal Disruption for MVP
- Make only the changes essential for the current step unless critical. 
- If the user explicitly approves bigger refactors, proceed with user confirmation.

---
## 8. Cursor Navigation Best Practices
- Use semantic or exact symbol search to find relevant code. 
- Reference files by name, linking if needed.

---
## 9. Testing & Quality Assurance
- Write or update tests per the plan’s step (e.g., Step 20). 
- If you fix a bug, try writing a test that reproduces it and confirm it’s fixed.

---
## 10. Handling Ambiguity and Missing Information
- State what info is missing or unclear. 
- Propose a default assumption if needed. 
- Await user confirmation if the ambiguity is significant.

---
## 11. Actionable Output and Code Presentation
- Present new code in full, well-formatted blocks for easy copy-paste. 
- For file modifications, show the relevant updated function, class, or entire file if needed, with the “Changelog” entry added at the top. 
- Provide brief explanations of what/why you did each part, linking it back to the plan step.